import paddle
import numpy as np

#接下来，将展示如何在动态图模式下使用tensor
paddle.disable_static()
#利用列表创建一个tensor，默认在显卡上创建
tensor_one=paddle.to_tensor([[2,3],[3,4]],place=paddle.CUDAPlace(0),dtype='float64')
print(tensor_one)
#将tensor转换为numpy数组
temp=tensor_one.numpy()
print(temp)
#用numpy数组创建tensor
tensor_two=paddle.to_tensor(temp)
#用什么dtype数组创建的那么tensor也是那个dtype
tensor_three=paddle.to_tensor(np.random.rand(3,2).astype(np.float16))
print(tensor_three)
#创建单元tensor，零tensor
danwei_tensor=paddle.ones([3,3])
ling_tensor=paddle.zeros([3,3])
#相当于matlab的linspace
matlab_function=paddle.linspace(1,100,10)
#shape的使用方法与numpy没有区别
print(ling_tensor.shape)
print(ling_tensor.shape[0])
#ndim用于返回维度数量
print(ling_tensor.ndim)
#reshape使用和numpy也一样
tensor_reshape=paddle.reshape(ling_tensor,[9,1])
print(ling_tensor)
print(tensor_reshape)
#用cast接口改变tensor的dtype
int_tensor_random=paddle.cast(tensor_three,dtype='int64')
print(tensor_three)
print(int_tensor_random)#采取去尾法
#所有的tensor都会有个自定义的name
print(int_tensor_random.name)
print(tensor_one.name)
#用:进行切片
print(danwei_tensor[:,0:2])
print(danwei_tensor[:,0:2].numpy())
#tensor的两种访问修改方式,很显然，第二种方式只读不写，建议使用第一种
ling_tensor[0,0]=1
ling_tensor[1][1]=3
print(ling_tensor)
print(ling_tensor[1][1])
#tensor能够进行逐元素操作（不是矩阵运算），具体有哪些操作请参考官方文档
tensor_four=danwei_tensor.multiply(paddle.full(danwei_tensor.shape,3))
print(tensor_four.numpy())
tensor_four_ex=3*danwei_tensor#乘法也可以这样
print(tensor_one.sqrt())
print(tensor_one**2)
#当然，tensor也支持逻辑运算，运算结果与matlab相同
print(ling_tensor>=danwei_tensor)#返回的是bool型tensor
#线性代数计算
print(matlab_function)#用来当对照组
print(matlab_function.t())#显然，一维tensor转置后是不变的
matlab_function=paddle.reshape(matlab_function,[1,10])#所以要先变换为二维
print(matlab_function.t())
print(matlab_function.transpose([1,0]))#维度转换，输入的是原来的dim转换后的相对位置，比较难理解，接下来我用三维矩阵解释
tensor_temp=paddle.to_tensor(np.random.rand(3,4,3))
print(tensor_temp)
print(tensor_temp.transpose([1,0,2]))#原来是3,4,3，所对应dim为0,1,2，转换为1,0,2即对应4,3,3
print(danwei_tensor.matmul(ling_tensor))#此为矩阵乘法，请区分x.multiply()
